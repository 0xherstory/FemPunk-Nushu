name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_ENV: test
  CI: true

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run type-check

    - name: Run linter
      run: npm run lint

    - name: Check formatting
      run: npm run format:check

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-type: [unit, integration, e2e]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        npm run test -- --run --coverage \
          --testPathPattern="test/(components|hooks|stores|utils)" \
          --collectCoverageFrom="lib/**/*.{ts,tsx}" \
          --collectCoverageFrom="components/**/*.{ts,tsx}" \
          --coverageReporters="text" --coverageReporters="lcov"

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        npm run test -- --run \
          --testPathPattern="test/integration" \
          --testTimeout=30000

    - name: Run E2E tests
      if: matrix.test-type == 'e2e'
      run: |
        npm run test -- --run \
          --testPathPattern="test/e2e" \
          --testTimeout=60000

    - name: Upload coverage reports
      if: matrix.test-type == 'unit' && matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # Web3 Specific Tests
  web3-tests:
    name: Web3 Integration Tests
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Web3 contract tests
      run: |
        npm run test -- --run \
          --testPathPattern="test.*contract|web3|wagmi" \
          --testTimeout=30000

    - name: Run wallet integration tests
      run: |
        npm run test -- --run \
          --testPathPattern="test.*wallet|purchase" \
          --testTimeout=30000

  # Collaboration Tests
  collaboration-tests:
    name: Collaboration Feature Tests
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run collaboration tests
      run: |
        npm run test -- --run \
          --testPathPattern="test.*collaboration|canvas|realtime" \
          --testTimeout=30000

    - name: Run Liveblocks integration tests
      run: |
        npm run test -- --run \
          --testPathPattern="test.*liveblocks" \
          --testTimeout=30000

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test, web3-tests, collaboration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run bundle size analysis
      run: |
        npx next-bundle-analyzer --no-open || true
        
    - name: Check bundle size limits
      run: |
        # Check if main bundle is under 500KB
        BUNDLE_SIZE=$(du -k .next/static/chunks/pages/_app-*.js | cut -f1)
        if [ $BUNDLE_SIZE -gt 500 ]; then
          echo "Bundle size $BUNDLE_SIZE KB exceeds 500KB limit"
          exit 1
        fi
        echo "Bundle size: $BUNDLE_SIZE KB (within limits)"

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, web3-tests, collaboration-tests]

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Verify build output
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed - .next directory not found"
          exit 1
        fi
        
        # Check for essential build files
        if [ ! -f ".next/BUILD_ID" ]; then
          echo "Build ID file missing"
          exit 1
        fi
        
        if [ ! -d ".next/static" ]; then
          echo "Static assets directory missing"
          exit 1
        fi
        
        echo "Build verification successful"

    - name: Test production build
      run: |
        npm run start &
        SERVER_PID=$!
        sleep 10
        
        # Test if server is responding
        curl -f http://localhost:3000 || exit 1
        
        kill $SERVER_PID
        echo "Production build test successful"

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for known vulnerabilities
      run: |
        # Run additional security checks
        npx audit-ci --moderate || true

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [quality, test, web3-tests, collaboration-tests, performance, build, security]
    if: always()

    steps:
    - name: Test Results
      run: |
        echo "## Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Category | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit & Integration Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Web3 Tests | ${{ needs.web3-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Collaboration Tests | ${{ needs.collaboration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Verification | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY