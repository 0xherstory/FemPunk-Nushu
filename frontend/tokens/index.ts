// Design tokens extracted from Figma
// This file will be auto-generated by the Figma MCP sync process

export interface DesignTokens {
  colors: ColorToken[];
  typography: TypographyToken[];
  spacing: SpacingToken[];
  borderRadius: BorderRadiusToken[];
  shadows: ShadowToken[];
}

export interface ColorToken {
  name: string;
  value: string;
  description?: string;
  category: 'primary' | 'secondary' | 'neutral' | 'semantic' | 'nushu';
}

export interface TypographyToken {
  name: string;
  fontSize: string;
  fontWeight: string;
  lineHeight: string;
  letterSpacing?: string;
  fontFamily: string;
}

export interface SpacingToken {
  name: string;
  value: string;
  pixelValue: number;
}

export interface BorderRadiusToken {
  name: string;
  value: string;
  pixelValue: number;
}

export interface ShadowToken {
  name: string;
  value: string;
  description?: string;
}

// Design tokens extracted from Figma using MCP
export const designTokens: DesignTokens = {
  colors: [
    {
      name: 'primary-500',
      value: '#7a2eff',
      description: 'Primary brand color from Figma',
      category: 'primary'
    },
    {
      name: 'primary-600', 
      value: '#6828b0',
      description: 'Primary dark variant from Figma',
      category: 'primary'
    },
    {
      name: 'accent-green',
      value: '#1ee11f',
      description: 'Accent green from Figma logo',
      category: 'secondary'
    },
    {
      name: 'nushu-red',
      value: '#ff6b9d',
      description: 'NuShu traditional red',
      category: 'nushu'
    },
    {
      name: 'nushu-gold',
      value: '#ffd700',
      description: 'NuShu gold accent',
      category: 'nushu'
    },
    {
      name: 'nushu-ink',
      value: '#1a1a1a',
      description: 'Traditional ink black',
      category: 'nushu'
    },
    {
      name: 'canvas-bg',
      value: '#fefefe',
      description: 'Canvas background',
      category: 'neutral'
    },
    {
      name: 'canvas-grid',
      value: '#f0f0f0',
      description: 'Canvas grid lines',
      category: 'neutral'
    },
    {
      name: 'success-500',
      value: '#10b981',
      description: 'Success state',
      category: 'semantic'
    },
    {
      name: 'warning-500',
      value: '#f59e0b',
      description: 'Warning state',
      category: 'semantic'
    },
    {
      name: 'error-500',
      value: '#ef4444',
      description: 'Error state',
      category: 'semantic'
    }
  ],
  typography: [
    {
      name: 'display-xl',
      fontSize: '3rem',
      fontWeight: '700',
      lineHeight: '3.5rem',
      fontFamily: 'Inter'
    },
    {
      name: 'heading-xl',
      fontSize: '2.25rem',
      fontWeight: '600',
      lineHeight: '2.75rem',
      fontFamily: 'Inter'
    },
    {
      name: 'heading-lg',
      fontSize: '1.5rem',
      fontWeight: '600',
      lineHeight: '2rem',
      fontFamily: 'Inter'
    },
    {
      name: 'heading-md',
      fontSize: '1.25rem',
      fontWeight: '500',
      lineHeight: '1.75rem',
      fontFamily: 'Inter'
    },
    {
      name: 'body-lg',
      fontSize: '1.125rem',
      fontWeight: '400',
      lineHeight: '1.75rem',
      fontFamily: 'Inter'
    },
    {
      name: 'body-base',
      fontSize: '1rem',
      fontWeight: '400',
      lineHeight: '1.5rem',
      fontFamily: 'Inter'
    },
    {
      name: 'body-sm',
      fontSize: '0.875rem',
      fontWeight: '400',
      lineHeight: '1.25rem',
      fontFamily: 'Inter'
    },
    {
      name: 'caption',
      fontSize: '0.75rem',
      fontWeight: '400',
      lineHeight: '1rem',
      fontFamily: 'Inter'
    }
  ],
  spacing: [
    { name: 'xs', value: '0.25rem', pixelValue: 4 },
    { name: 'sm', value: '0.5rem', pixelValue: 8 },
    { name: 'md', value: '1rem', pixelValue: 16 },
    { name: 'lg', value: '1.5rem', pixelValue: 24 },
    { name: 'xl', value: '2rem', pixelValue: 32 },
    { name: '2xl', value: '3rem', pixelValue: 48 },
    { name: '3xl', value: '4rem', pixelValue: 64 },
    { name: '4xl', value: '6rem', pixelValue: 96 },
    { name: '5xl', value: '8rem', pixelValue: 128 }
  ],
  borderRadius: [
    { name: 'none', value: '0', pixelValue: 0 },
    { name: 'sm', value: '0.25rem', pixelValue: 4 },
    { name: 'md', value: '0.5rem', pixelValue: 8 },
    { name: 'lg', value: '0.75rem', pixelValue: 12 },
    { name: 'xl', value: '1rem', pixelValue: 16 },
    { name: 'full', value: '9999px', pixelValue: 9999 }
  ],
  shadows: [
    {
      name: 'xs',
      value: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
      description: 'Extra small shadow'
    },
    {
      name: 'sm',
      value: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
      description: 'Small shadow'
    },
    {
      name: 'md',
      value: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
      description: 'Medium shadow'
    },
    {
      name: 'lg',
      value: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
      description: 'Large shadow'
    },
    {
      name: 'canvas',
      value: '0 2px 8px 0 rgb(0 0 0 / 0.08)',
      description: 'Canvas specific shadow'
    },
    {
      name: 'brush-stroke',
      value: '0 1px 4px 0 rgb(122 46 255 / 0.2)',
      description: 'Brush stroke shadow with brand color'
    }
  ]
};

// CSS Custom Properties for easy integration
export const cssVariables = {
  colors: Object.fromEntries(
    designTokens.colors.map(token => [`--color-${token.name}`, token.value])
  ),
  typography: Object.fromEntries(
    designTokens.typography.flatMap(token => [
      [`--font-size-${token.name}`, token.fontSize],
      [`--font-weight-${token.name}`, token.fontWeight],
      [`--line-height-${token.name}`, token.lineHeight]
    ])
  ),
  spacing: Object.fromEntries(
    designTokens.spacing.map(token => [`--spacing-${token.name}`, token.value])
  ),
  borderRadius: Object.fromEntries(
    designTokens.borderRadius.map(token => [`--radius-${token.name}`, token.value])
  ),
  shadows: Object.fromEntries(
    designTokens.shadows.map(token => [`--shadow-${token.name}`, token.value])
  )
};